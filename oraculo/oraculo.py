import streamlit as st
import random
import os
from datetime import datetime

st.set_page_config(page_title="or√°culo das sombras", layout="centered", page_icon="üëæ")

# --- ESTILO VISUAL ---
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=UnifrakturCook:wght@700&display=swap');

        html, body, .stApp, * {
            background-color: #000000 !important;
            color: #39FF14 !important;
        }

        h1 {
            font-family: 'UnifrakturCook', cursive !important;
            font-size: 48px !important;
            text-align: center;
        }

        .stTextInput > div > div > input {
            color: #39FF14;
            background-color: #111111;
            border: 1px solid #39FF14;
            font-size: 20px !important;
        }

        .stTextInput label {
            color: #39FF14;
            font-size: 20px !important;
        }

        .block-container {
            padding-top: 2rem;
        }

        .stMarkdown {
            font-size: 22px;
        }
    </style>
""", unsafe_allow_html=True)

# --- T√çTULO ---
st.markdown("‚ò† Or√°culo das Sombras ‚ò†")

# --- CONTADOR DE ALMAS ---
contador_path = "contador.txt"

def carregar_contador():
    if not os.path.exists(contador_path):
        with open(contador_path, "w") as f:
            f.write("0")
    with open(contador_path, "r") as f:
        return int(f.read().strip())

def salvar_contador(valor):
    with open(contador_path, "w") as f:
        f.write(str(valor))

if "ultima_visita" not in st.session_state:
    st.session_state.ultima_visita = datetime.today().date()
    contador = carregar_contador() + 1
    salvar_contador(contador)
else:
    contador = carregar_contador()

st.markdown(f"<p style='text-align:center;'>üëª {contador} almas j√° consultaram o or√°culo...</p>", unsafe_allow_html=True)

# --- HUMORES ---
humores = {
    "zombeteiro": lambda r: f"{r}  >:)",
    "fatalista": lambda r: f"{r}  (n√£o adianta fugir...)",
    "cr√≠ptico": lambda r: f"{r}  :::",
    "frio": lambda r: f"{r}  [an√°lise encerrada]",
    "emocional": lambda r: f"{r}  :-|"
}
humor_hoje = random.choice(list(humores.keys()))

# --- RESPOSTAS POR CATEGORIA ---
respostas_por_categoria = {
    "amor": [
        "O amor est√° doente, mas ainda respira.",
        "Ele n√£o pensa mais em voc√™... s√≥ quando chove.",
        "Seu cora√ß√£o lembra do que sua mente quer esquecer."
    ],
    "trabalho": [
        "Seu esfor√ßo sustenta um castelo de cartas.",
        "Voc√™ trabalha demais pra algu√©m que sonha t√£o pouco.",
        "A riqueza vir√°, mas ela cobra caro."
    ],
    "vida": [
        "Voc√™ j√° escolheu... s√≥ n√£o percebeu ainda.",
        "Tudo que voc√™ sente √© a vida te empurrando.",
        "N√£o h√° caminho certo ‚Äî s√≥ mais escurid√£o com passos."
    ],
    "morte": [
        "Voc√™ n√£o morre quando para de respirar... mas quando esquecem seu nome.",
        "O fim j√° come√ßou ‚Äî voc√™ s√≥ est√° atrasado.",
        "A morte te observa com t√©dio. Ainda n√£o √© sua vez."
    ],
    "tempo": [
        "O c√©u est√° inst√°vel... como suas emo√ß√µes.",
        "Vai chover, sim. Mas s√≥ por dentro.",
        "O clima n√£o decide. E voc√™, j√° decidiu?"
    ],
    "data": [
        f"Hoje √© {datetime.now().strftime('%A, %d de %B de %Y')}. Se isso importa...",
        "O tempo √© uma pris√£o com perfume de rotina.",
        "Os dias passam. Voc√™ permanece?"
    ],
    "tecnologia": [
        "As m√°quinas v√£o dominar. Mas com paci√™ncia.",
        "Seu computador te odeia, mas com respeito.",
        "A IA observa. Ela j√° entendeu quem voc√™ √©."
    ],
    "saude": [
        "Voc√™ n√£o est√° quebrado. S√≥ est√° no lugar errado.",
        "At√© a escurid√£o tem pausas. Fa√ßa a sua.",
        "Seu corpo fala o que sua alma n√£o ousa dizer."
    ],
    "desconhecido": [
        "Voc√™ fez a pergunta errada. E agora √© tarde.",
        "O Or√°culo n√£o reconhece sua d√∫vida, mas reconhece voc√™.",
        "Sil√™ncio. A resposta vir√° em outro sonho."
    ]
}

# --- TRACKING DE RESPOSTAS USADAS ---
if "respostas_usadas" not in st.session_state:
    st.session_state.respostas_usadas = {cat: [] for cat in respostas_por_categoria}

# --- CATEGORIZADOR DE PERGUNTA ---
def identificar_categoria(pergunta):
    p = pergunta.lower()
    if any(x in p for x in ["amor", "relacionamento", "namoro", "ele", "ela"]): return "amor"
    if any(x in p for x in ["trabalho", "emprego", "carreira", "dinheiro", "grana", "rico", "rica"]): return "trabalho"
    if any(x in p for x in ["vida", "sentido", "caminho", "escolha"]): return "vida"
    if any(x in p for x in ["morte", "fim", "morrer", "acabar"]): return "morte"
    if any(x in p for x in ["chuva", "clima", "tempo", "vai chover"]): return "tempo"
    if any(x in p for x in ["hoje", "dia", "data", "semana"]): return "data"
    if any(x in p for x in ["computador", "tecnologia", "ia", "rob√¥"]): return "tecnologia"
    if any(x in p for x in ["cansado", "ansiedade", "triste", "depress", "dor", "doen√ßa"]): return "saude"
    return "desconhecido"

# --- INTERFACE ---
pergunta = st.text_input("üî•Fa√ßa sua pergunta ao or√°culo:")

if pergunta:
    categoria = identificar_categoria(pergunta)
    usadas = st.session_state.respostas_usadas[categoria]
    disponiveis = [r for r in respostas_por_categoria[categoria] if r not in usadas]

    if not disponiveis:
        usadas.clear()
        disponiveis = respostas_por_categoria[categoria][:]

    resposta = random.choice(disponiveis)
    st.session_state.respostas_usadas[categoria].append(resposta)
    resposta_final = humores[humor_hoje](resposta)

    st.markdown("---")
    st.markdown(f"üîé *{pergunta}*  \nüëÅüëÅ {resposta_final}")
