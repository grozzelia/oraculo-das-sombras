import streamlit as st
import random
import os
from datetime import datetime

st.set_page_config(page_title="or√°culo das sombras", layout="centered", page_icon="üëæ")

# --- ESTILO VISUAL ---
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap');

        html, body, .stApp {
            background-color: #3e2c41 !important;
            color: #baffc9 !important;
            font-family: 'Courier New' !important;
        }

        h1 {
            font-family: 'MedievalSharp', cursive !important;
            font-size: 40px !important;
            text-align: center;
            margin-bottom: 0;
            color: #baffc9 !important;
            text-shadow: 1px 1px 2px black;
        }

        .stTextInput > div > div > input {
            color: #baffc9 !important;
            background-color: #4e3b53 !important;
            border: 1px solid #baffc9 !important;
            font-size: 18px !important;
            font-family: 'Courier New' !important;
        }

        .stTextInput label {
            color: #baffc9 !important;
            font-size: 18px !important;
            font-family: 'Courier New' !important;
            text-shadow: 1px 1px 2px black;
        }

        .block-container {
            padding-top: 2rem;
        }

        .stMarkdown {
            font-size: 20px;
            font-family: 'Courier New' !important;
            text-shadow: 1px 1px 2px black;
        }

        .viewerBadge_container__1QSob,
        .stStatusWidget,
        header,
        .css-18ni7ap {
            background-color: #3e2c41 !important;
            color: #baffc9 !important;
        }
    </style>
""", unsafe_allow_html=True)

# --- T√çTULO ---
st.markdown("<h1>üëæ or√°culo das sombras üëæ</h1>", unsafe_allow_html=True)

# --- CONTADOR DE ALMAS ---
contador_path = "contador.txt"

def carregar_contador():
    if not os.path.exists(contador_path):
        with open(contador_path, "w") as f:
            f.write("0")
    with open(contador_path, "r") as f:
        return int(f.read().strip())

def salvar_contador(valor):
    with open(contador_path, "w") as f:
        f.write(str(valor))

if "ultima_visita" not in st.session_state:
    st.session_state.ultima_visita = datetime.today().date()
    contador = carregar_contador() + 1
    salvar_contador(contador)
else:
    contador = carregar_contador()

st.markdown(f"""
    <div style='text-align:center; font-size:18px; margin-top:0px; margin-bottom:30px'>
        üëª {contador} almas j√° consultaram o or√°culo...
    </div>
""", unsafe_allow_html=True)

# --- HUMORES ---
humores = {
    "zombeteiro": lambda r: f"{r}  >:)",
    "fatalista": lambda r: f"{r}  (n√£o adianta fugir...)",
    "cr√≠ptico": lambda r: f"{r}  :::",
    "frio": lambda r: f"{r}  [an√°lise encerrada]",
    "emocional": lambda r: f"{r}  :-|"
}
humor_hoje = random.choice(list(humores.keys()))

# --- RESPOSTAS POR CATEGORIA ---
respostas_por_categoria = {
    "amor": [
        "O amor que voc√™ busca est√° na sombra de quem voc√™ costumava ser.",
        "O desejo est√° contaminado. Purifique-se antes de pedir reciprocidade.",
        "Ele pensa, mas n√£o com afeto. Apenas com saudade do controle.",
        "Voc√™ ama mais a ideia do que o real. E o real j√° partiu.",
        "Elx observa de longe, mas o cora√ß√£o est√° em outro tempo."
    ],
    "trabalho": [
        "Voc√™ n√£o trabalha: voc√™ sobrevive mascarado de produtividade.",
        "A promo√ß√£o que voc√™ deseja n√£o comprar√° sua paz.",
        "A riqueza est√° pr√≥xima, mas vir√° travestida de sacr√≠fio.",
        "Seu talento est√° sendo vendido a pre√ßo de banana pela sua zona de conforto."
    ],
    "vida": [
        "Tudo est√° conectado, mas voc√™ insiste em olhar s√≥ pro que brilha.",
        "A vida quer te empurrar pra uma porta... que voc√™ est√° com medo de abrir.",
        "Voc√™ √© feito(a) de repeti√ß√µes, mas uma pequena quebra pode te libertar.",
        "A escolha certa √© aquela que assusta e atrai ao mesmo tempo."
    ],
    "morte": [
        "A morte est√° entediada. N√£o voc√™.",
        "Seu medo da morte est√° matando sua vida."
    ],
    "tempo": [
        "O clima espelha seu caos interior. Vai chover quando voc√™ quebrar."
    ],
    "data": [
        f"Hoje √© {datetime.now().strftime('%A, %d de %B de %Y')}. E voc√™ ainda est√° aqui.",
        "A data importa pouco para o destino que voc√™ est√° moldando."
    ],
    "tecnologia": [
        "A tecnologia espelha sua ansiedade, n√£o a resolve.",
        "Seu celular sabe mais sobre voc√™ do que sua fam√≠lia."
    ],
    "saude": [
        "Seu corpo implora por escuta, n√£o por rem√©dios.",
        "Voc√™ se trata como um erro. Comece se tratando como um lar."
    ],
    "desconhecido": [
        "O or√°culo se cala. E no sil√™ncio, voc√™ deve escutar.",
        "A resposta vir√° quando voc√™ parar de procurar."
    ]
}

# --- TRACKING DE RESPOSTAS USADAS ---
if "respostas_usadas" not in st.session_state:
    st.session_state.respostas_usadas = {cat: [] for cat in respostas_por_categoria}

# --- CATEGORIZADOR DE PERGUNTA ---
def identificar_categoria(pergunta):
    p = pergunta.lower()
    if any(x in p for x in ["amor", "relacionamento", "namoro", "ele", "ela"]): return "amor"
    if any(x in p for x in ["trabalho", "emprego", "carreira", "dinheiro", "grana", "rico", "rica"]): return "trabalho"
    if any(x in p for x in ["vida", "sentido", "caminho", "escolha"]): return "vida"
    if any(x in p for x in ["morte", "fim", "morrer", "acabar"]): return "morte"
    if any(x in p for x in ["chuva", "clima", "tempo", "vai chover"]): return "tempo"
    if any(x in p for x in ["hoje", "dia", "data", "semana"]): return "data"
    if any(x in p for x in ["computador", "tecnologia", "ia", "rob√¥"]): return "tecnologia"
    if any(x in p for x in ["cansado", "ansiedade", "triste", "depress", "dor", "doen√ßa"]): return "saude"
    return "desconhecido"

# --- INTERFACE ---
pergunta = st.text_input("üëπ Sua pergunta:")

if pergunta:
    categoria = identificar_categoria(pergunta)
    usadas = st.session_state.respostas_usadas[categoria]
    disponiveis = [r for r in respostas_por_categoria[categoria] if r not in usadas]

    if not disponiveis:
        usadas.clear()
        disponiveis = respostas_por_categoria[categoria][:]

    resposta = random.choice(disponiveis)
    st.session_state.respostas_usadas[categoria].append(resposta)
    resposta_final = humores[humor_hoje](resposta)

    st.markdown("---")
    st.markdown(f"{resposta_final}")
